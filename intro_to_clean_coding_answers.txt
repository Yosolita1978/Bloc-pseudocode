1. In your own words, explain what clean code is and why it is important.
A. It's the same consideration that you have to take in any piece of work that you're doing for a class or work. If anybody else is reading your code, you have to write it clean.

2. Explain what would happen if the code was not created to an acceptable standard
A. imagine teams like the team in charge of the contacts app for your phone written nasty code. That app is used for several others app, especially apps in social media. So, imagine that every time a social media app is trying to connect with your contacts, so it will know if you already have a friend in that social media, and the code is the worst spaghetti code that you had seen, that poor team will have to suffer a lot.

3. No, I will use a different function for convert values to Celsius and a different function to convert values to Farenheit. Here is my idea of it:

FUNCTION convertToCelsius(value)
Set value to (value - 32) * (5/9)
Return value

FUNCTION convertToFahrenheit(value)
Set value to value * 1.8000 + 32.00
Return value

FUNCTION checkTemp(x, y)
IF y == "F" THEN
CALL convertToCelsius(z)
PRINT z
ELSE y == "C" THEN
Call convertToFahrenheit(z)
Print z
End FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
A. Yes, I think this function does just one task, and is clear what is doing, so I'm understanding the idea behind that code.

5. Refactor the following problems:
A. FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

In this case you could have two helper functions to apply the discountRate if the payment is Cash or Credit Card.

Function applyCash(amount, subTotal, discountRate)
SET amount to amount - subtotal * discountRate + (subTotal * tax)
Return amount

Function applyCredit(amount, subTotal, discountRate)
Set amount to subTotal * discountRate + (subTotal * tax)

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

IF paymentType  == 'CASH' THEN
  Call getPayment RETURNING amount
  Call applyCash WITH amount, subTotal, discountRate RETURNING amount
  PRINT "Change due: " + amount

ELSE IF paymentType == 'CREDIT' THEN
  Call getPayment RETURNING amount
  Call applyCredit WITH amount, subTotal, discountRate RETURNING amount
  PRINT "Your credit card has been charged: " + amount

END IF
END FUNCTION

B. FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

I think that this function is very clear and check correctly if a guest can check out a book.

C. CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

There is a lot of refactoring that you could do with classes. I think a better way of separate this class is group all the functions from the BankAccount itself and all the functions from the transactions in different groups.

CLASS BankAccount

FUNCTION checkStatus
    IF NOT(customer.hasCheckingAccount) THEN
        CALL offerCheckingAccount
    END

FUNCTION creditCardOffer
    IF NOT(customer.hasCreditCard) THEN
       CALL offerCreditCard
    END
END FUNCTION

...
END CLASS

CLASS BankAccountTransactions

FUNCTION displayBalance
   PRINT balance
END FUNCTION

FUNCTION deposit(amount)
   SET balance to balance + amount
END FUNCTION

FUNCTION withdraw(amount)
    IF balance > amount THEN
      SET balance to balance - amount
    END
END FUNCTION
...

END CLASS

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.
A. var isPerfectSquare = function(arraynum) {
    var sum = 0;
    for(let i = 0; i < arraynum.lenght; i++){
        sum = sum + arraynum[i];
    }

    if(isSquare(sum)){
        return Math.squrt(sum);
    } else {
        return sum;
    }

};

function isSquare(n) {
    return Math.sqrt(n) % 1 === 0;
};

7. Given an array of integers, find out whether the array contains any duplicate elements

Array.prototype.checkIfArrayIsUnique = function() {
    this.sort();
    for ( var i = 1; i < this.length; i++ ){
        if(this[i-1] == this[i])
            return false;
    }
    return true;
    }

8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word.

function isAnagram(str1, str2) {
  if (str1.length !== str2.length) {
    // not the same length, can't be anagram
    return false;
  }

  if (str1 === str2){
    // the same string so it's true
    return true;
  }

  var dict = {};

  for(var i = 0; i < str1.length; i++) {
    if (dict[str1[i]])
      dict[str1[i]] = dict[str1[i]] + 1;
    else
      dict[str1[i]] = 1;
  }

  for(var j = 0; j < str2.length; j++) {
    if (dict[str2[j]])
      dict[str2[j]] = dict[str2[j]] - 1;
    else
      dict[str2[j]] = 1;
  }

  for (var key in dict) {
    if (dict[key] !== 0)
      return false;
  }

  return true;
}
