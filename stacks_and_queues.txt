1. What is the main difference between a stack and a queue?
A. In a stack we remove the item the most recently added. In a queue, we remove the item the least recently added.

2. What are the similarities between stacks and queues?
A. Both are data structures, and in both, another process is not allowed - like to pick items from the middle.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?
A. Usually, for the process of UNDO, an engineer uses a stack. If you took from the stack the last change of the process, and put that process in another pile, you can work the REDO from that new stack of steps.

Programming Questions

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

function reverseString(string){
  var stack = [];
  for(let i = 0; i < string.length; i++){
    stack.push(string[i]);
  }
  var reverseWord = "";
  while (stack.length > 0) {
        reverseWord += stack.pop();
    }
  return reverseWord;
}

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.
A. Sorry, I don't understand this question.

3. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

function Queue() {
  this.data = [];
}

Queue.prototype.add = function(record) {
  this.data.unshift(record);
}
Queue.prototype.remove = function() {
  this.data.pop();
}
