Text answers

1. What are some pros and cons of using linked lists instead of arrays?

A.On of the pros is that inserting and deleting data does not require us to move/shift subsequent data elements. And, one of the cons is that if we want to access a specific element, we need to traverse the list from the head of the list to find it which can take longer than an array access.

2. Come up with a real world example of a linked list.
A. The turn system for the appointments in your doctor office.

Programing questions.

1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

A.

function Node(value) {
  this.value = value;
  this.next = undefined;
}

function SLinkedList(){
   this.head = undefined;
   this.length = 0;
}

function Push(value){
    //Protection check - make sure item to insert is valid.
    if (!value) return;
    //Create new Node to wrap around the item data.
    var node = new Node(value);
    //Check if it is not the first element in list, if so, update   the node next pointer to point to old head
    if (head) {
       node.next = head;
    }
    //Update the head of the list and length of the list.
    head = node;
    length++;
}


2. Given an unsorted singly linked list, remove all duplicates from the linked list.

function LinkedList() {
    this._head = null;
    this._size =  0;
}

LinkedList.prototype = {
    createNode: function(val) {
        return {
            data: val,
            next: null
        }
    },
    addToTail: function(val) {
        var current,
        newNode = this.createNode(val);
        if(this._head == null) {
            this._head = newNode;
        }
        else {
            current = this._head;
            while(current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        this._size++;
    },
    removeDuplicates: function() {
        prev = this._head;
        current = this._head.next;
        hash = {};
        while(current != null) {
            if(!hash[current.data]) {
                hash[current.data] = true;
            } else {
                prev.next = current.next;
                this._size--;
            }
            prev = current;
            current = current.next;
        }
    }
}

3. Given an unsorted singly linked list, reverse it.

var reverseList = function(head) {
    var result = null;
    var stack = [];

    var current = head;
    while (current) {
        stack.push(current);
        current = current.next;
    }

    // Set head to end of list.
    result = stack.pop() || [];
    current = result;

    while (current) {
        current.next = stack.pop();
        current = current.next;
    }

    return result;
};
